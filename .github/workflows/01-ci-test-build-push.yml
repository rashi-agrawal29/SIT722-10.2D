name: CI - Test, Build & Push

on:
  push:
    branches: [ "testing" ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Ensure all required DBs exist
      - name: Create databases for services
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE products;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE orders;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE customers;"

      # Test product_service
      - name: Test product_service
        working-directory: backend/product_service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/products
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      # Test order_service
      - name: Test order_service
        working-directory: backend/order_service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orders
          PRODUCT_SERVICE_URL: http://localhost:8000
          CUSTOMER_SERVICE_URL: http://localhost:8001
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      # Test customer_service
      - name: Test customer_service
        working-directory: backend/customer_service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/customers
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      # Test frontend
      - name: Test frontend
        run: |
          docker build -t frontend-test -f frontend/Dockerfile ./frontend
      # Docker login
      - name: Docker login
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      # Build & push images
      - name: Build & push images
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest backend/customer_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
