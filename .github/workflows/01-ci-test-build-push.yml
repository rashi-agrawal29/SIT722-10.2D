name: CI - Test, Build & Push

on:
  push:
    branches: [ "testing" ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Example: Node tests (frontend)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install & test frontend
        working-directory: frontend
        run: |
          npm ci
          npm test --if-present

      # Example: Python tests (services)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Test product_service
        working-directory: product_service
        run: |
          pip install -r requirements.txt
          pytest -q || exit 1

      - name: Test order_service
        working-directory: order_service
        run: |
          pip install -r requirements.txt
          pytest -q || exit 1

      # Login to ACR
      - name: Docker login
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          --username ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Set image tag
        id: vars
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Buildx setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build & push multi-arch images (force linux/amd64 for AKS)
      - name: Build & push images
        run: |
          docker buildx build --platform linux/amd64 \
            -t $ACR_LOGIN_SERVER/frontend:${{ steps.vars.outputs.tag }} ./frontend --push
          docker buildx build --platform linux/amd64 \
            -t $ACR_LOGIN_SERVER/product_service:${{ steps.vars.outputs.tag }} ./product_service --push
          docker buildx build --platform linux/amd64 \
            -t $ACR_LOGIN_SERVER/order_service:${{ steps.vars.outputs.tag }} ./order_service --push

      # Save image tags for staging workflow
      - name: Save image tags
        run: |
          echo "$ACR_LOGIN_SERVER/frontend:${{ steps.vars.outputs.tag }}" > image-tags.txt
          echo "$ACR_LOGIN_SERVER/product_service:${{ steps.vars.outputs.tag }}" >> image-tags.txt
          echo "$ACR_LOGIN_SERVER/order_service:${{ steps.vars.outputs.tag }}" >> image-tags.txt

      - uses: actions/upload-artifact@v4
        with:
          name: image-tags
          path: image-tags.txt
